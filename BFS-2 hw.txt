BFS-2


Problem 1
Binary Tree Right Side View (https://leetcode.com/problems/binary-tree-right-side-view/)

solution 1:

#bfs
#TC O(n) SC O(n)

from queue import Queue
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        if root == None: 
            return []

        q = Queue()
        result = []
        q.put(root)
        while not q.empty():
            size = q.qsize()
            for i in range(size):
                curr = q.get()
                if i == size - 1: 
                    result.append(curr.val)

                if curr.left != None:
                    q.put(curr.left)
                if curr.right != None:
                    q.put(curr.right) 
        
        return result


solution 2:

# #dfs
# #left traversal first
#TC O(n) SC O(h)

class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        if root == None:
            return []

        self.result = []
        self.dfs(root, 0)
        return self.result

    def dfs(self, root: Optional[TreeNode], lvl : int) ->None:
        #base
        if root == None:
            return

        #logic
        if lvl == len(self.result) :
            self.result.append(root.val)
        else:
            self.result[lvl] = root.val

        self.dfs(root.left , lvl + 1)
        self.dfs(root.right , lvl + 1)





solution 3:

#dfs
#right traversal first
#TC O(n) SC O(h)

class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        if root == None:
            return []

        self.result = []
        self.dfs(root, 0)
        return self.result

    def dfs(self, root: Optional[TreeNode], lvl : int) ->None:
        #base
        if root == None:
            return

        #logic
        if lvl == len(self.result) :
            self.result.append(root.val)
        
        self.dfs(root.right , lvl + 1)
        self.dfs(root.left , lvl + 1)




Problem 2
Cousins in binary tree (https://leetcode.com/problems/cousins-in-binary-tree/)

solution 1:

#dfs
#TC O(n) and SC O(h)

class Solution:
    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:
        if root == None:
            return False

        self.x_parent = None
        self.x_lvl = -1
        self.y_parent = None
        self.y_lvl = -1
        self.dfs(root, 0, None , x , y)
        return self.x_parent != self.y_parent and self.x_lvl == self.y_lvl

    def dfs(self, root: Optional[TreeNode],lvl : int , parent : Optional[TreeNode] ,  x: int, y: int):
        #base
        if root == None or (self.x_parent != None and self.y_parent != None):
            return

        #logic
        if root.val == x:
            self.x_parent = parent
            self.x_lvl = lvl

        if root.val == y:
            self.y_parent = parent
            self.y_lvl = lvl

        #recursion
        self.dfs(root.left , lvl + 1 , root , x , y)
        self.dfs(root.right , lvl + 1 , root , x , y)



solution 2:

#bfs
#TC O(n) and SC O(n)

from queue import Queue
class Solution:
    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:
        if root == None:
            return False

        q = Queue()
        x_found = False
        y_found = False
        q.put(root)
        while not q.empty():
            size = q.qsize()
            for i in range(size):
                curr = q.get()
                if curr.val == x :
                    x_found = True
                if curr.val == y:
                    y_found = True
                if curr.left != None and curr.right != None:
                    if curr.left.val == x and curr.right.val == y:
                        return False
                    if curr.left.val == y and curr.right.val == x:
                        return False
                
                if curr.left != None:
                    q.put(curr.left)
                if curr.right != None:
                    q.put(curr.right)
            
            if x_found == True and y_found == True:
                return True
            
            if x_found == True or y_found == True:
                return False

        return False